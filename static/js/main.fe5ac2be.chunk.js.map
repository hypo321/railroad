{"version":3,"sources":["Board.js","Dice.js","Tile_utils.js","Board_utils.js","data/game_grid.js","Score_utils.js","Shadow_utils.js","Dice_utils.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Board","react_default","a","createElement","className","Board_Scoring","scores","this","props","Board_Tile","setTile","enabled","specialTiles","number","Board_Grid","endPoints","rotateTile","placeTile","gridData","gridDataShadow","Component","Grid","_this","map","row","rowIndex","key","tile","colIndex","shadowTile","shadowRotation","rotation","transformString","flipped","onClick","event","alt","src","style","transform","tileFlipped","tileRotation","deadEnds","match","left","push","right","above","below","round","type","Tile","_this2","Scoring","Fragment","connections","road","rail","middleTiles","deadEnd","expansions","total","Dice","clickDice","face","tiles","exits","north","east","south","west","bridge","special","edge","side","r","tileType","regularTile","isValid","x","y","test","isBlank","exitAbove","exitBelow","exitLeft","exitRight","selected","found","clash","matchExits","rotatedDirection","direction","points","dirNum","target","exitFromTile","checkExits","selectedExit","findEndPoints","longestPath","source","arguments","length","undefined","depth","list","path","filter","cell","endpoints","lp","connectingExits","reduce","concat","scoreLookup","updateScores","setState","amount","acc","ends","value","deadEndScore","cells","checkMiddleTiles","splitArray","exit","traverseExits","completePath","sort","item","pos","ary","split","console","log","edgeConnectionsScores","traverse","Math","max","Object","keys","previous","array","obj","longest","entries","forEach","_ref","_ref2","slicedToArray","_ref3","_ref4","substring","resetScores","clearShadow","createShadow","selectedTile","tileRotate","validity","validTile","diceMap","shake","currentRound","Number","roundMsg","setTimeout","dice","rollOne","roll","diceState","floor","random","Game","state","setGameState","stateObject","redoRound","d","placeRotatedTile","changeTile","die","allPlayed","nonePlayed","src_Board","src_Dice","App","src_Game","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe5ac2be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//import Canvas from \"./canvas\";\n\nclass Board extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"Board\">\n          <Scoring scores={this.props.scores} />\n          <Tile\n            setTile={this.props.setTile}\n            enabled={this.props.specialTiles[0]}\n            number=\"10\"\n          />\n          <Tile\n            setTile={this.props.setTile}\n            enabled={this.props.specialTiles[1]}\n            number=\"11\"\n          />\n          <Tile\n            setTile={this.props.setTile}\n            enabled={this.props.specialTiles[2]}\n            number=\"12\"\n          />\n          <Tile\n            setTile={this.props.setTile}\n            enabled={this.props.specialTiles[3]}\n            number=\"13\"\n          />\n          <Tile\n            setTile={this.props.setTile}\n            enabled={this.props.specialTiles[4]}\n            number=\"14\"\n          />\n          <Tile\n            setTile={this.props.setTile}\n            enabled={this.props.specialTiles[5]}\n            number=\"15\"\n          />\n\n          {/* <Canvas /> */}\n          <canvas />\n\n          <Grid\n            endPoints={this.props.endPoints}\n            rotateTile={this.props.rotateTile}\n            placeTile={this.props.placeTile}\n            gridData={this.props.gridData}\n            gridDataShadow={this.props.gridDataShadow}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Grid extends Component {\n  render() {\n    let gridData = this.props.gridData;\n    let gridDataShadow = this.props.gridDataShadow;\n    let endPoints = this.props.endPoints;\n\n    return (\n      <div className=\"Grid\">\n        <div className=\"gridDiv\">\n          {gridData.map((row, rowIndex) => {\n            if (rowIndex < 1 || rowIndex > 7) {\n              return null;\n            }\n            return (\n              <div key={\"divRow:\" + rowIndex} className=\"gridRow\">\n                {row.map((tile, colIndex) => {\n                  if (colIndex < 1 || colIndex > 7) {\n                    return null;\n                  }\n\n                  if (tile === null) {\n                    if (gridDataShadow[rowIndex][colIndex]) {\n                      let shadowTile = gridDataShadow[rowIndex][colIndex];\n\n                      let shadowRotation = shadowTile.rotation;\n                      let shadowFlipped = shadowTile.flipped;\n                      let transformString = shadowFlipped\n                        ? \"rotate(\" + shadowRotation + \"deg) scaleX(-1)\"\n                        : \"rotate(\" + shadowRotation + \"deg)\";\n                      return (\n                        <div\n                          key={rowIndex + \":\" + colIndex}\n                          className={\"gridCell validCell\"}\n                        >\n                          <img\n                            onClick={event => {\n                              this.props.placeTile(rowIndex, colIndex);\n                            }}\n                            key={\"img:\" + rowIndex + \":\" + colIndex}\n                            alt={\n                              \"From Shadow x:\" + rowIndex + \", y:\" + colIndex\n                            }\n                            className={\"imgBlank validCell\"}\n                            src={\n                              \"/images/transparent/RRI-\" +\n                              shadowTile.tile +\n                              \".png\"\n                            }\n                            style={{\n                              transform: transformString\n                            }}\n                          />\n                        </div>\n                      );\n                    } else {\n                      return (\n                        <div\n                          key={rowIndex + \":\" + colIndex}\n                          className={\"gridCell\"}\n                        />\n                      );\n                    }\n                  } else {\n                    let tileFlipped = tile.flipped;\n                    let tileRotation = tile.rotation;\n                    let transformString = tileFlipped\n                      ? \"rotate(\" + tileRotation + \"deg) scaleX(-1)\"\n                      : \"rotate(\" + tileRotation + \"deg)\";\n                    let deadEnds = [];\n                    if (\n                      endPoints &&\n                      endPoints[rowIndex][colIndex] &&\n                      endPoints[rowIndex][colIndex].match\n                    ) {\n                      let match = endPoints[rowIndex][colIndex].match;\n\n                      if (match.left === \"dead-end\") {\n                        deadEnds.push(\n                          <span\n                            key={rowIndex + \":\" + colIndex + \":left\"}\n                            className=\"left\"\n                          >\n                            O\n                          </span>\n                        );\n                      }\n                      if (match.right === \"dead-end\") {\n                        deadEnds.push(\n                          <span\n                            key={rowIndex + \":\" + colIndex + \":right\"}\n                            className=\"right\"\n                          >\n                            O\n                          </span>\n                        );\n                      }\n                      if (match.above === \"dead-end\") {\n                        deadEnds.push(\n                          <span\n                            key={rowIndex + \":\" + colIndex + \":above\"}\n                            className=\"above\"\n                          >\n                            O\n                          </span>\n                        );\n                      }\n                      if (match.below === \"dead-end\") {\n                        deadEnds.push(\n                          <span\n                            key={rowIndex + \":\" + colIndex + \":below\"}\n                            className=\"below\"\n                          >\n                            O\n                          </span>\n                        );\n                      }\n                    }\n\n                    return (\n                      <div\n                        onClick={() =>\n                          this.props.rotateTile(rowIndex, colIndex)\n                        }\n                        key={rowIndex + \":\" + colIndex}\n                        className={\"gridCell\"}\n                      >\n                        <span className=\"roundNumber\">{tile.round}</span>\n                        <img\n                          alt={\"x:\" + rowIndex + \", y:\" + colIndex}\n                          key={\"img:\" + rowIndex + \":\" + colIndex}\n                          className=\"imgCell\"\n                          style={{\n                            transform: transformString\n                          }}\n                          src={\"/images/transparent/RRI-\" + tile.type + \".png\"}\n                        />\n                        {deadEnds}\n                      </div>\n                    );\n                  }\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Tile extends Component {\n  render() {\n    return (\n      <div\n        onClick={() => {\n          this.props.setTile(this.props.number);\n        }}\n        className={\n          \"tile tile\" +\n          this.props.number +\n          (this.props.enabled ? \" enabled\" : \" disabled\")\n        }\n      >\n        {\" \"}\n      </div>\n    );\n  }\n}\n\nclass Scoring extends Component {\n  render() {\n    const scores = this.props.scores;\n    return (\n      <React.Fragment>\n        <div className={\"scoring connections\"}>{scores.connections}</div>\n        <div className={\"scoring longestroad\"}>{scores.road}</div>\n        <div className={\"scoring longestrail\"}>{scores.rail}</div>\n        <div className={\"scoring middletile\"}>{scores.middleTiles}</div>\n        <div className={\"scoring deadend\"}>{scores.deadEnd}</div>\n        <div className={\"scoring expansions\"}>{scores.expansions}</div>\n        <div className={\"scoring total\"}>{scores.total}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\n\nclass Dice extends Component {\n  render() {\n    return (\n      <div\n        onClick={this.props.clickDice}\n        className={\n          this.props.type + \" \" + this.props.face + \" \" + this.props.enabled\n        }\n      >\n        <div className={\"front \" + this.props.enabled} />\n        <div className={\"back \" + this.props.enabled} />\n        <div className={\"right \" + this.props.enabled} />\n        <div className={\"left \" + this.props.enabled} />\n        <div className={\"top \" + this.props.enabled} />\n        <div className={\"bottom \" + this.props.enabled} />\n      </div>\n    );\n  }\n}\n\nexport default Dice;\n","const tiles = [\n  {\n    exits: { north: \"rail\", east: \"blank\", south: \"blank\", west: \"road\" },\n    bridge: false,\n    special: false,\n    edge: true\n  },\n  {\n    exits: { north: \"rail\", east: \"blank\", south: \"blank\", west: \"rail\" },\n    bridge: false,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"rail\", east: \"rail\", south: \"blank\", west: \"rail\" },\n    bridge: false,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"rail\", east: \"blank\", south: \"rail\", west: \"blank\" },\n    bridge: false,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"blank\", south: \"blank\", west: \"road\" },\n    bridge: false,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"road\", south: \"blank\", west: \"road\" },\n    bridge: false,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"blank\", south: \"road\", west: \"blank\" },\n    bridge: false,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"rail\", south: \"road\", west: \"rail\" },\n    bridge: true,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"rail\", east: \"blank\", south: \"road\", west: \"blank\" },\n    bridge: false,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"rail\", east: \"blank\", south: \"blank\", west: \"road\" },\n    bridge: false,\n    special: false,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"road\", south: \"rail\", west: \"road\" },\n    bridge: false,\n    special: true,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"rail\", south: \"rail\", west: \"rail\" },\n    bridge: false,\n    special: true,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"road\", south: \"road\", west: \"road\" },\n    bridge: false,\n    special: true,\n    edge: false\n  },\n  {\n    exits: { north: \"rail\", east: \"rail\", south: \"rail\", west: \"rail\" },\n    bridge: false,\n    special: true,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"rail\", south: \"rail\", west: \"road\" },\n    bridge: false,\n    special: true,\n    edge: false\n  },\n  {\n    exits: { north: \"road\", east: \"rail\", south: \"road\", west: \"rail\" },\n    bridge: false,\n    special: true,\n    edge: false\n  },\n  {\n    exits: { north: \"blank\", east: \"blank\", south: \"blank\", west: \"road\" },\n    bridge: false,\n    special: true,\n    edge: true\n  },\n  {\n    exits: { north: \"rail\", east: \"blank\", south: \"blank\", west: \"blank\" },\n    bridge: false,\n    special: false,\n    edge: true\n  },\n  {\n    exits: { north: \"edge\", east: \"edge\", south: \"edge\", west: \"edge\" },\n    bridge: false,\n    special: false,\n    edge: false\n  }\n];\n\nconst edge = (side, type) => {\n  let r = 0;\n  let tileType = 0;\n\n  if (type === \"rail\") {\n    r = 180;\n    tileType = 17;\n  } else if (type === \"road\") {\n    r = -90;\n    tileType = 16;\n  } else if (type === \"blank\") {\n    r = 0;\n    tileType = 18;\n  }\n\n  if (side === \"top\") {\n    r = r + 0;\n  } else if (side === \"right\") {\n    r = r + 90;\n  } else if (side === \"bottom\") {\n    r = r + 180;\n  } else if (side === \"left\") {\n    r = r + 270;\n  }\n\n  return { type: tileType, rotation: r, flipped: false };\n};\n\nconst regularTile = (type, rotation, flipped) => {\n  return { type, rotation, flipped };\n};\n\nexport { tiles, edge, regularTile };\n","import { tiles } from \"./Tile_utils\";\n\nconst isValid = (x, y, type, rotation, flipped, test, gridData) => {\n  //debugger;\n  if (!isBlank(gridData, x, y) && test !== \"yes\") {\n    return false;\n  }\n\n  let above = exitAbove(y, x, gridData);\n  let below = exitBelow(y, x, gridData);\n  let left = exitLeft(y, x, gridData);\n  let right = exitRight(y, x, gridData);\n\n  let match = {};\n\n  let selected = tiles[type];\n\n  match.found = false;\n  match.clash = false;\n\n  // test above\n  match.above = matchExits(\n    selected.exits[rotatedDirection(\"north\", rotation, flipped)],\n    above\n  );\n  match.found =\n    match.above &&\n    match.above !== \"blank\" &&\n    match.above !== \"edge\" &&\n    match.above !== \"clash\"\n      ? true\n      : match.found;\n  match.clash = match.above === \"clash\" ? true : match.clash;\n\n  // test below\n  match.below = matchExits(\n    selected.exits[rotatedDirection(\"south\", rotation, flipped)],\n    below\n  );\n  match.found =\n    match.below &&\n    match.below !== \"blank\" &&\n    match.below !== \"edge\" &&\n    match.below !== \"clash\"\n      ? true\n      : match.found;\n  match.clash = match.below === \"clash\" ? true : match.clash;\n\n  // test right\n  match.right = matchExits(\n    selected.exits[rotatedDirection(\"east\", rotation, flipped)],\n    right\n  );\n  match.found =\n    match.right &&\n    match.right !== \"blank\" &&\n    match.right !== \"edge\" &&\n    match.right !== \"clash\"\n      ? true\n      : match.found;\n  match.clash = match.right === \"clash\" ? true : match.clash;\n\n  // test left\n  match.left = matchExits(\n    selected.exits[rotatedDirection(\"west\", rotation, flipped)],\n    left\n  );\n  match.found =\n    match.left &&\n    match.left !== \"blank\" &&\n    match.left !== \"edge\" &&\n    match.left !== \"clash\"\n      ? true\n      : match.found;\n  match.clash = match.left === \"clash\" ? true : match.clash;\n\n  //console.log(x, y, rotation, flipped, match);\n\n  if (match.clash && match.found) {\n    return { isValid: false, match };\n  }\n\n  if (\n    (selected.exits[rotatedDirection(\"north\", rotation, flipped)] === \"rail\" &&\n      above === \"rail\") ||\n    (selected.exits[rotatedDirection(\"north\", rotation, flipped)] === \"road\" &&\n      above === \"road\")\n  ) {\n    return { isValid: true, match };\n  }\n  if (\n    (selected.exits[rotatedDirection(\"south\", rotation, flipped)] === \"rail\" &&\n      below === \"rail\") ||\n    (selected.exits[rotatedDirection(\"south\", rotation, flipped)] === \"road\" &&\n      below === \"road\")\n  ) {\n    return { isValid: true, match };\n  }\n  if (\n    (selected.exits[rotatedDirection(\"east\", rotation, flipped)] === \"rail\" &&\n      right === \"rail\") ||\n    (selected.exits[rotatedDirection(\"east\", rotation, flipped)] === \"road\" &&\n      right === \"road\")\n  ) {\n    return { isValid: true, match };\n  }\n  if (\n    (selected.exits[rotatedDirection(\"west\", rotation, flipped)] === \"rail\" &&\n      left === \"rail\") ||\n    (selected.exits[rotatedDirection(\"west\", rotation, flipped)] === \"road\" &&\n      left === \"road\")\n  ) {\n    return { isValid: true, match };\n  }\n\n  return { isValid: false, match };\n};\n\nconst isBlank = (gridData, x, y) => {\n  return gridData[y][x] === null ? true : false;\n};\n\nconst rotatedDirection = (direction, rotation, flipped) => {\n  let points = [\"north\", \"east\", \"south\", \"west\"];\n  if (flipped) {\n    points = [\"north\", \"west\", \"south\", \"east\"];\n  }\n\n  //debugger;\n  rotation = (rotation % 360) / 90;\n  // if (rotation === 0) {\n  //   return direction;\n  // }\n  let dirNum = 0;\n  if (direction === \"north\") {\n    dirNum = 0;\n  }\n  if (direction === \"east\") {\n    dirNum = 1;\n  }\n  if (direction === \"south\") {\n    dirNum = 2;\n  }\n  if (direction === \"west\") {\n    dirNum = 3;\n  }\n\n  let dirIndex = (4 + dirNum - rotation) % 4;\n\n  return points[dirIndex];\n};\n\nconst exitAbove = (y, x, gridData) => {\n  let target = {};\n  if (y > 0 && y < 8 && x > 0 && x < 8 && gridData[y - 1][x]) {\n    target.exits = tiles[gridData[y - 1][x].type].exits;\n    target.rotation = gridData[y - 1][x].rotation;\n    target.flipped = gridData[y - 1][x].flipped;\n    return target.exits[\n      rotatedDirection(\"south\", target.rotation, target.flipped)\n    ];\n  }\n  return null;\n};\n\nconst exitLeft = (y, x, gridData) => {\n  let target = {};\n  if (y > 0 && y < 8 && x > 0 && x < 8 && gridData[y][x - 1]) {\n    target.exits = tiles[gridData[y][x - 1].type].exits;\n    target.rotation = gridData[y][x - 1].rotation;\n    target.flipped = gridData[y][x - 1].flipped;\n    return target.exits[\n      rotatedDirection(\"east\", target.rotation, target.flipped)\n    ];\n  }\n  return null;\n};\nconst exitBelow = (y, x, gridData) => {\n  let target = {};\n  if (y > 0 && y < 8 && x > 0 && x < 8 && gridData[y + 1][x]) {\n    target.exits = tiles[gridData[y + 1][x].type].exits;\n    target.rotation = gridData[y + 1][x].rotation;\n    target.flipped = gridData[y + 1][x].flipped;\n    return target.exits[\n      rotatedDirection(\"north\", target.rotation, target.flipped)\n    ];\n  }\n  return null;\n};\nconst exitRight = (y, x, gridData) => {\n  let target = {};\n  if (y > 0 && y < 8 && x > 0 && x < 8 && gridData[y][x + 1]) {\n    target.exits = tiles[gridData[y][x + 1].type].exits;\n    target.rotation = gridData[y][x + 1].rotation;\n    target.flipped = gridData[y][x + 1].flipped;\n    return target.exits[\n      rotatedDirection(\"west\", target.rotation, target.flipped)\n    ];\n  }\n  return null;\n};\n\nconst exitFromTile = (tile, direction) => {\n  return tiles[tile.type].exits[\n    rotatedDirection(direction, tile.rotation, tile.flipped)\n  ];\n};\n\nconst checkExits = (selectedExit, target) => {\n  //debugger;\n\n  if (selectedExit === target || target === \"edge\") {\n    return \"valid\";\n  }\n  if (\n    (!target || target === \"blank\") &&\n    (selectedExit === \"road\" || selectedExit === \"rail\")\n  ) {\n    return \"dead-end\";\n  }\n\n  return null;\n};\n\nconst findEndPoints = gridData => {\n  const endPoints = gridData.map((row, rowIndex) => {\n    if (rowIndex < 1 || rowIndex > 7) {\n      return null;\n    }\n    return row.map((tile, colIndex) => {\n      if (colIndex < 1 || colIndex > 7) {\n        return null;\n      }\n\n      if (tile === null) {\n        return null;\n      } else {\n        let y = rowIndex,\n          x = colIndex,\n          { rotation, flipped, type } = tile;\n        let above = exitAbove(y, x, gridData);\n        let below = exitBelow(y, x, gridData);\n        let left = exitLeft(y, x, gridData);\n        let right = exitRight(y, x, gridData);\n\n        let match = {};\n\n        let selected = tiles[type];\n\n        //   match.found = false;\n        //   match.clash = false;\n\n        match.above = checkExits(\n          selected.exits[rotatedDirection(\"north\", rotation, flipped)],\n          above\n        );\n        match.below = checkExits(\n          selected.exits[rotatedDirection(\"south\", rotation, flipped)],\n          below\n        );\n        match.right = checkExits(\n          selected.exits[rotatedDirection(\"east\", rotation, flipped)],\n          right\n        );\n\n        match.left = checkExits(\n          selected.exits[rotatedDirection(\"west\", rotation, flipped)],\n          left\n        );\n\n        return { match };\n      }\n    });\n  });\n\n  return endPoints;\n};\n\nconst longestPath = (\n  gridData,\n  rowIndex,\n  colIndex,\n  source = \"\",\n  depth = 0,\n  list = [],\n  type = \"road\"\n) => {\n  depth++;\n  let path = { x: colIndex, y: rowIndex, depth };\n  let tile = gridData[rowIndex][colIndex];\n  // if (list && list.length > 0)\n  //   console.log({\n  //     length: list.length,\n  //     list: list.map(thing => {\n  //       return {\n  //         x: thing.x,\n  //         y: thing.y,\n  //         depth: thing.depth,\n  //         source: thing.source\n  //       };\n  //     })\n  //   });\n\n  if (!tile) {\n    //  console.log(rowIndex + \":\" + colIndex, \"No tile found\");\n    return { path: null, list: list };\n  }\n\n  if (rowIndex < 1 || rowIndex > 7 || colIndex < 1 || colIndex > 7) {\n    // path.end = \"edge-connection\";\n    //   console.log(rowIndex + \":\" + colIndex, \"Found edge connection\");\n    return { path: \"edge-connection:\" + colIndex + \":\" + rowIndex, list: list };\n  }\n\n  if (\n    list.filter(cell => cell.x === colIndex && cell.y === rowIndex).length > 0\n  ) {\n    // console.log(rowIndex + \":\" + colIndex, \"Found previously visited tile\");\n    return { path: null, list: list };\n  }\n\n  let exits = isValid(\n    colIndex,\n    rowIndex,\n    tile.type,\n    tile.rotation,\n    tile.flipped,\n    \"yes\",\n    gridData\n  );\n\n  if (!exits) {\n    return { path: null, list: list };\n  }\n\n  list.push({ x: colIndex, y: rowIndex, depth, source });\n\n  list.length = depth;\n\n  if (depth === 1) {\n    let endpoints = 0;\n    if (exitFromTile(tile, \"north\") === type) {\n      if (exits.match.above === type && rowIndex === 1) {\n        //  console.log(\"Found connection north:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.above !== exitFromTile(tile, \"north\")) {\n        //  console.log(\"Found end north:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n\n    if (exitFromTile(tile, \"east\") === type) {\n      if (exits.match.right === type && colIndex === 7) {\n        //  console.log(\"Found connection east:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.right !== exitFromTile(tile, \"east\")) {\n        //  console.log(\"Found end east:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n\n    if (exitFromTile(tile, \"south\") === type) {\n      if (exits.match.below === type && rowIndex === 7) {\n        //  console.log(\"Found connection south:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.below !== exitFromTile(tile, \"south\")) {\n        //  console.log(\"Found end south:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n    if (exitFromTile(tile, \"west\") === type) {\n      if (exits.match.left === type && colIndex === 1) {\n        //  console.log(\"Found connection west:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.left !== exitFromTile(tile, \"west\")) {\n        // console.log(\"Found end west:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n    if (endpoints === 0) {\n      if (\n        type === \"road\" &&\n        tile.type !== 8 &&\n        tile.type !== 9 &&\n        tile.type !== 11\n      ) {\n        //console.log(\"Not an endpoint\", colIndex, rowIndex, tile);\n        return null;\n      } else if (\n        type === \"rail\" &&\n        tile.type !== 8 &&\n        tile.type !== 9 &&\n        tile.type !== 10\n      ) {\n        return null;\n      }\n    }\n  }\n  let lp = null;\n  //debugger;\n  if (exits.match.above === type && exitFromTile(tile, \"north\") === type) {\n    if (source !== \"above\") {\n      // && rowIndex > 1) {\n      //  console.log(\"found above\");\n      // if (rowIndex === 0) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-below\" });\n      //   return path;\n      // }\n      //path.push({ x: colIndex, y: rowIndex, direction: \"below\" });\n\n      lp = longestPath(\n        gridData,\n        rowIndex - 1,\n        colIndex,\n        \"below\",\n        depth,\n        list,\n        type\n      );\n\n      path.above = lp.path;\n      list = lp.list;\n    }\n  }\n  list.length = depth;\n  if (exits.match.right === type && exitFromTile(tile, \"east\") === type) {\n    if (source !== \"right\") {\n      // && colIndex < 7) { //\n      // console.log(\"found right\");\n      // if (colIndex === 7) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-left\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"left\" });\n      lp = longestPath(\n        gridData,\n        rowIndex,\n        colIndex + 1,\n        \"left\",\n        depth,\n        list,\n        type\n      );\n\n      path.right = lp.path;\n      list = lp.list;\n    }\n  }\n  list.length = depth;\n  if (exits.match.below === type && exitFromTile(tile, \"south\") === type) {\n    if (source !== \"below\") {\n      // && rowIndex < 7) {\n      //  console.log(\"found below\");\n      // if (rowIndex === 7) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-above\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"above\" });\n      lp = longestPath(\n        gridData,\n        rowIndex + 1,\n        colIndex,\n        \"above\",\n        depth,\n        list,\n        type\n      );\n\n      path.below = lp.path;\n      list = lp.list;\n    }\n  }\n  list.length = depth;\n  if (exits.match.left === type && exitFromTile(tile, \"west\") === type) {\n    if (source !== \"left\") {\n      // && colIndex > 1) {\n      //  console.log(\"found left\");\n      // if (colIndex === 0) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-right\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"right\" });\n      lp = longestPath(\n        gridData,\n        rowIndex,\n        colIndex - 1,\n        \"right\",\n        depth,\n        list,\n        type\n      );\n      path.left = lp.path;\n      list = lp.list;\n    }\n  }\n  list.length = depth;\n  //path.push({ x: colIndex, y: rowIndex, direction: \"end\" });\n  return { path, list };\n};\n\nconst completePath = (\n  gridData,\n  rowIndex,\n  colIndex,\n  source = \"\",\n  depth = 0,\n  list = []\n) => {\n  depth++;\n  let path = { x: colIndex, y: rowIndex, depth };\n  let tile = gridData[rowIndex][colIndex];\n  // if (list && list.length > 0)\n  //   console.log({\n  //     length: list.length,\n  //     list: list.map(thing => {\n  //       return {\n  //         x: thing.x,\n  //         y: thing.y,\n  //         depth: thing.depth,\n  //         source: thing.source\n  //       };\n  //     })\n  //   });\n\n  if (!tile) {\n    //  console.log(rowIndex + \":\" + colIndex, \"No tile found\");\n    return { path: null, list: list };\n  }\n\n  if (rowIndex < 1 || rowIndex > 7 || colIndex < 1 || colIndex > 7) {\n    // path.end = \"edge-connection:\" + colIndex + \":\" + rowIndex;\n    //   console.log(rowIndex + \":\" + colIndex, \"Found edge connection\");\n    return { path: \"edge-connection:\" + colIndex + \":\" + rowIndex, list: list };\n  }\n\n  if (\n    list.filter(cell => cell.x === colIndex && cell.y === rowIndex).length > 0\n  ) {\n    if (tile.type !== 7) {\n      // console.log(rowIndex + \":\" + colIndex, \"Found previously visited tile\");\n      return { path: null, list: list };\n    }\n  }\n\n  let exits = isValid(\n    colIndex,\n    rowIndex,\n    tile.type,\n    tile.rotation,\n    tile.flipped,\n    \"yes\",\n    gridData\n  );\n\n  if (!exits) {\n    return { path: null, list: list };\n  }\n\n  list.push({ x: colIndex, y: rowIndex, depth, source, type: tile.type });\n\n  list.length = depth;\n\n  // if (depth === 1) {\n  //   let endpoints = 0;\n  //   if (\n  //     exitFromTile(tile, \"north\") === \"road\" ||\n  //     exitFromTile(tile, \"north\") === \"rail\"\n  //   )  {\n  //     if (exits.match.above === type && rowIndex === 1) {\n  //       //  console.log(\"Found connection north:\", colIndex, rowIndex, tile);\n  //       endpoints++;\n  //     } else if (exits.match.above !== exitFromTile(tile, \"north\")) {\n  //       //  console.log(\"Found end north:\", colIndex, rowIndex, tile);\n  //       endpoints++;\n  //     }\n  //   }\n\n  //   if (\n  //     exitFromTile(tile, \"east\") === \"road\" ||\n  //     exitFromTile(tile, \"east\") === \"rail\"\n  //   )  {\n  //     if (exits.match.right === type && colIndex === 7) {\n  //       //  console.log(\"Found connection east:\", colIndex, rowIndex, tile);\n  //       endpoints++;\n  //     } else if (exits.match.right !== exitFromTile(tile, \"east\")) {\n  //       //  console.log(\"Found end east:\", colIndex, rowIndex, tile);\n  //       endpoints++;\n  //     }\n  //   }\n\n  //   if (\n  //     exitFromTile(tile, \"south\") === \"road\" ||\n  //     exitFromTile(tile, \"south\") === \"rail\"\n  //   ) {\n  //     if (\n  //       (exits.match.below === \"road\" || exits.match.below === \"rail\") &&\n  //       rowIndex === 7\n  //     ) {\n  //       //  console.log(\"Found connection south:\", colIndex, rowIndex, tile);\n  //       endpoints++;\n  //     } else if (exits.match.below !== exitFromTile(tile, \"south\")) {\n  //       //  console.log(\"Found end south:\", colIndex, rowIndex, tile);\n  //       endpoints++;\n  //     }\n  //   }\n  //   if (\n  //     exitFromTile(tile, \"west\") === \"road\" ||\n  //     exitFromTile(tile, \"west\") === \"rail\"\n  //   ) {\n  //     if (\n  //       (exits.match.left === \"road\" || exits.match.left === \"rail\") &&\n  //       colIndex === 1\n  //     ) {\n  //       //  console.log(\"Found connection west:\", colIndex, rowIndex, tile);\n  //       endpoints++;\n  //     } else if (exits.match.left !== exitFromTile(tile, \"west\")) {\n  //       // console.log(\"Found end west:\", colIndex, rowIndex, tile);\n  //       endpoints++;\n  //     }\n  //   }\n  // }\n  let lp = null;\n  //debugger;\n  if (tile.type === 7) {\n    if (\n      exits.match.above === exitFromTile(tile, \"north\") &&\n      exits.match.above !== \"blank\"\n    ) {\n      if (source === \"below\") {\n        // && rowIndex > 1) {\n        //  console.log(\"found above\");\n        // if (rowIndex === 0) {\n        //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-below\" });\n        //   return path;\n        // }\n        //path.push({ x: colIndex, y: rowIndex, direction: \"below\" });\n\n        lp = completePath(\n          gridData,\n          rowIndex - 1,\n          colIndex,\n          \"below\",\n          depth,\n          list\n        );\n\n        path.above = lp.path;\n        list = lp.list;\n      }\n    }\n    list.length = depth;\n    if (\n      exits.match.right === exitFromTile(tile, \"east\") &&\n      exits.match.right !== \"blank\"\n    ) {\n      if (source === \"left\") {\n        lp = completePath(\n          gridData,\n          rowIndex,\n          colIndex + 1,\n          \"left\",\n          depth,\n          list\n        );\n\n        path.right = lp.path;\n        list = lp.list;\n      }\n    }\n    list.length = depth;\n    if (\n      exits.match.below === exitFromTile(tile, \"south\") &&\n      exits.match.below !== \"blank\"\n    ) {\n      if (source === \"above\") {\n        lp = completePath(\n          gridData,\n          rowIndex + 1,\n          colIndex,\n          \"above\",\n          depth,\n          list\n        );\n\n        path.below = lp.path;\n        list = lp.list;\n      }\n    }\n    list.length = depth;\n    if (\n      exits.match.left === exitFromTile(tile, \"west\") &&\n      exits.match.left !== \"blank\"\n    ) {\n      if (source === \"right\") {\n        lp = completePath(\n          gridData,\n          rowIndex,\n          colIndex - 1,\n          \"right\",\n          depth,\n          list\n        );\n        path.left = lp.path;\n        list = lp.list;\n      }\n    }\n  } else {\n    if (\n      exits.match.above === exitFromTile(tile, \"north\") &&\n      exits.match.above !== \"blank\"\n    ) {\n      if (source !== \"above\") {\n        // && rowIndex > 1) {\n        //  console.log(\"found above\");\n        // if (rowIndex === 0) {\n        //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-below\" });\n        //   return path;\n        // }\n        //path.push({ x: colIndex, y: rowIndex, direction: \"below\" });\n\n        lp = completePath(\n          gridData,\n          rowIndex - 1,\n          colIndex,\n          \"below\",\n          depth,\n          list\n        );\n\n        path.above = lp.path;\n        list = lp.list;\n      }\n    }\n    list.length = depth;\n    if (\n      exits.match.right === exitFromTile(tile, \"east\") &&\n      exits.match.right !== \"blank\"\n    ) {\n      if (source !== \"right\") {\n        lp = completePath(\n          gridData,\n          rowIndex,\n          colIndex + 1,\n          \"left\",\n          depth,\n          list\n        );\n\n        path.right = lp.path;\n        list = lp.list;\n      }\n    }\n    list.length = depth;\n    if (\n      exits.match.below === exitFromTile(tile, \"south\") &&\n      exits.match.below !== \"blank\"\n    ) {\n      if (source !== \"below\") {\n        lp = completePath(\n          gridData,\n          rowIndex + 1,\n          colIndex,\n          \"above\",\n          depth,\n          list\n        );\n\n        path.below = lp.path;\n        list = lp.list;\n      }\n    }\n    list.length = depth;\n    if (\n      exits.match.left === exitFromTile(tile, \"west\") &&\n      exits.match.left !== \"blank\"\n    ) {\n      if (source !== \"left\") {\n        lp = completePath(\n          gridData,\n          rowIndex,\n          colIndex - 1,\n          \"right\",\n          depth,\n          list\n        );\n        path.left = lp.path;\n        list = lp.list;\n      }\n    }\n  }\n\n  list.length = depth;\n  //path.push({ x: colIndex, y: rowIndex, direction: \"end\" });\n  return { path, list };\n};\n\nconst longestRoad = (gridData, rowIndex, colIndex, source, depth, list) => {\n  depth++;\n\n  let path = { x: colIndex, y: rowIndex, depth, source };\n  let tile = gridData[rowIndex][colIndex];\n\n  // if (list && list.length > 0)\n  //   console.log({\n  //     length: list.length,\n  //     list: list.map(thing => {\n  //       return {\n  //         x: thing.x,\n  //         y: thing.y,\n  //         depth: thing.depth,\n  //         source: thing.source\n  //       };\n  //     })\n  //   });\n\n  if (!tile) {\n    return { path: null, list };\n  }\n  if (rowIndex < 1 || rowIndex > 7 || colIndex < 1 || colIndex > 7) {\n    path.end = \"edge-connection\";\n    return { path: null, list };\n  }\n\n  if (\n    list.filter(cell => cell.x === colIndex && cell.y === rowIndex).length > 0\n  ) {\n    return { path: null, list };\n  }\n\n  list.push({ x: colIndex, y: rowIndex });\n\n  let exits = isValid(\n    colIndex,\n    rowIndex,\n    tile.type,\n    tile.rotation,\n    tile.flipped,\n    \"yes\",\n    gridData\n  );\n\n  if (!exits) {\n    return path;\n  }\n\n  // check for end node\n  if (depth === 1) {\n    let endpoints = 0;\n    if (exitFromTile(tile, \"north\") === \"road\") {\n      if (exits.match.above === \"road\" && rowIndex === 1) {\n        //  console.log(\"Found connection north:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.above !== exitFromTile(tile, \"north\")) {\n        //  console.log(\"Found end north:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n\n    if (exitFromTile(tile, \"east\") === \"road\") {\n      if (exits.match.right === \"road\" && colIndex === 7) {\n        //  console.log(\"Found connection east:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.right !== exitFromTile(tile, \"east\")) {\n        //  console.log(\"Found end east:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n\n    if (exitFromTile(tile, \"south\") === \"road\") {\n      if (exits.match.below === \"road\" && rowIndex === 7) {\n        //  console.log(\"Found connection south:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.below !== exitFromTile(tile, \"south\")) {\n        //  console.log(\"Found end south:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n    if (exitFromTile(tile, \"west\") === \"road\") {\n      if (exits.match.left === \"road\" && colIndex === 1) {\n        //  console.log(\"Found connection west:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.left !== exitFromTile(tile, \"west\")) {\n        // console.log(\"Found end west:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n    if (endpoints === 0) {\n      if (tile.type !== 8 && tile.type !== 9 && tile.type !== 11) {\n        //console.log(\"Not an endpoint\", colIndex, rowIndex, tile);\n        return null;\n      }\n    }\n  }\n\n  //debugger;\n  if (exits.match.above === \"road\" && exitFromTile(tile, \"north\") === \"road\") {\n    if (source !== \"above\" && rowIndex > 1) {\n      //  console.log(\"found above\");\n      // if (rowIndex === 0) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-below\" });\n      //   return path;\n      // }\n      //path.push({ x: colIndex, y: rowIndex, direction: \"below\" });\n      path.above = longestRoad(\n        gridData,\n        rowIndex - 1,\n        colIndex,\n        \"below\",\n        depth,\n        list\n      ).path;\n    }\n  }\n  if (exits.match.right === \"road\" && exitFromTile(tile, \"east\") === \"road\") {\n    if (source !== \"right\" && colIndex < 7) {\n      // console.log(\"found right\");\n      // if (colIndex === 7) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-left\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"left\" });\n      path.right = longestRoad(\n        gridData,\n        rowIndex,\n        colIndex + 1,\n        \"left\",\n        depth,\n        list\n      ).path;\n    }\n  }\n  if (exits.match.below === \"road\" && exitFromTile(tile, \"south\") === \"road\") {\n    if (source !== \"below\" && rowIndex < 7) {\n      //  console.log(\"found below\");\n      // if (rowIndex === 7) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-above\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"above\" });\n      path.below = longestRoad(\n        gridData,\n        rowIndex + 1,\n        colIndex,\n        \"above\",\n        depth,\n        list\n      ).path;\n    }\n  }\n  if (exits.match.left === \"road\" && exitFromTile(tile, \"west\") === \"road\") {\n    if (source !== \"left\" && colIndex > 1) {\n      //  console.log(\"found left\");\n      // if (colIndex === 0) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-right\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"right\" });\n      path.left = longestRoad(\n        gridData,\n        rowIndex,\n        colIndex - 1,\n        \"right\",\n        depth,\n        list\n      ).path;\n    }\n  }\n  //path.push({ x: colIndex, y: rowIndex, direction: \"end\" });\n  return { path, list };\n};\n\nconst longestRail = (gridData, rowIndex, colIndex, source, depth) => {\n  depth++;\n  let path = { x: colIndex, y: rowIndex, depth };\n  let tile = gridData[rowIndex][colIndex];\n\n  // console.log({ tile }, { path });\n  //debugger;\n  if (!tile) {\n    return null;\n  }\n  if (rowIndex < 1 || rowIndex > 7 || colIndex < 1 || colIndex > 7) {\n    path.end = \"edge-connection\";\n    return path;\n  }\n\n  let exits = isValid(\n    colIndex,\n    rowIndex,\n    tile.type,\n    tile.rotation,\n    tile.flipped,\n    \"yes\",\n    gridData\n  );\n\n  if (!exits) {\n    return path;\n  }\n\n  // check for end node\n  if (depth === 1) {\n    let endpoints = 0;\n    if (exitFromTile(tile, \"north\") === \"rail\") {\n      if (exits.match.above === \"rail\" && rowIndex === 1) {\n        //  console.log(\"Found connection north:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.above !== exitFromTile(tile, \"north\")) {\n        //  console.log(\"Found end north:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n\n    if (exitFromTile(tile, \"east\") === \"rail\") {\n      if (exits.match.right === \"rail\" && colIndex === 7) {\n        //  console.log(\"Found connection east:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.right !== exitFromTile(tile, \"east\")) {\n        //  console.log(\"Found end east:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n\n    if (exitFromTile(tile, \"south\") === \"rail\") {\n      if (exits.match.below === \"rail\" && rowIndex === 7) {\n        //  console.log(\"Found connection south:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.below !== exitFromTile(tile, \"south\")) {\n        //  console.log(\"Found end south:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n    if (exitFromTile(tile, \"west\") === \"rail\") {\n      if (exits.match.left === \"rail\" && colIndex === 1) {\n        // console.log(\"Found connection west:\", colIndex, rowIndex, tile);\n        endpoints++;\n      } else if (exits.match.left !== exitFromTile(tile, \"west\")) {\n        // console.log(\"Found end west:\", colIndex, rowIndex, tile);\n        endpoints++;\n      }\n    }\n    if (endpoints === 0) {\n      if (tile.type !== 8 && tile.type !== 9 && tile.type !== 11) {\n        //console.log(\"Not an endpoint\", colIndex, rowIndex, tile);\n        return null;\n      }\n    }\n  }\n\n  //debugger;\n  if (exits.match.above === \"rail\" && exitFromTile(tile, \"north\") === \"rail\") {\n    if (source !== \"above\" && rowIndex > 1) {\n      //  console.log(\"found above\");\n      // if (rowIndex === 0) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-below\" });\n      //   return path;\n      // }\n      //path.push({ x: colIndex, y: rowIndex, direction: \"below\" });\n      path.above = longestRail(\n        gridData,\n        rowIndex - 1,\n        colIndex,\n        \"below\",\n        depth\n      );\n    }\n  }\n  if (exits.match.right === \"rail\" && exitFromTile(tile, \"east\") === \"rail\") {\n    if (source !== \"right\" && colIndex < 7) {\n      // console.log(\"found right\");\n      // if (colIndex === 7) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-left\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"left\" });\n      path.right = longestRail(gridData, rowIndex, colIndex + 1, \"left\", depth);\n    }\n  }\n  if (exits.match.below === \"rail\" && exitFromTile(tile, \"south\") === \"rail\") {\n    if (source !== \"below\" && rowIndex < 7) {\n      //  console.log(\"found below\");\n      // if (rowIndex === 7) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-above\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"above\" });\n      path.below = longestRail(\n        gridData,\n        rowIndex + 1,\n        colIndex,\n        \"above\",\n        depth\n      );\n    }\n  }\n  if (exits.match.left === \"rail\" && exitFromTile(tile, \"west\") === \"rail\") {\n    if (source !== \"left\" && colIndex > 1) {\n      //  console.log(\"found left\");\n      // if (colIndex === 0) {\n      //   path.push({ x: colIndex, y: rowIndex, direction: \"edge-right\" });\n      //   return path;\n      // }\n      // path.push({ x: colIndex, y: rowIndex, direction: \"right\" });\n      path.left = longestRail(gridData, rowIndex, colIndex - 1, \"right\", depth);\n    }\n  }\n  //path.push({ x: colIndex, y: rowIndex, direction: \"end\" });\n  return path;\n};\n\nconst matchExits = (selectedExit, target) => {\n  //debugger;\n  if (!target || !selectedExit) {\n    return null;\n  }\n  if (\n    selectedExit === target ||\n    target === \"blank\" ||\n    selectedExit === \"blank\" ||\n    selectedExit === \"edge\" ||\n    target === \"edge\"\n  ) {\n    return target;\n  } else if (selectedExit !== target) {\n    return \"clash\";\n  }\n  return null;\n};\n\nexport {\n  isValid,\n  isBlank,\n  exitAbove,\n  exitBelow,\n  exitLeft,\n  exitRight,\n  exitFromTile,\n  checkExits,\n  findEndPoints,\n  longestRoad,\n  longestRail,\n  longestPath,\n  completePath\n};\n","import { edge, regularTile } from \"../Tile_utils\";\n\nregularTile(4, 180, false);\n\n/* const fullGrid = [\n  [\n    null,\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: -90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 17,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: -90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    null\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    {\n      type: 4,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 5,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 5,\n      rotation: 270,\n      flipped: false,\n      round: 1\n    },\n    null,\n    null,\n    null,\n    null,\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 17,\n      rotation: 450,\n      flipped: false\n    },\n    {\n      type: 4,\n      rotation: 90,\n      flipped: false\n    },\n    {\n      type: 4,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 5,\n      rotation: 270,\n      flipped: false,\n      round: 1\n    },\n    null,\n    null,\n    null,\n    {\n      type: 2,\n      rotation: 180,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 17,\n      rotation: 270,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    null,\n    {\n      type: 7,\n      rotation: 180,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 2,\n      rotation: 270,\n      flipped: false,\n      round: 1\n    },\n    null,\n    null,\n    {\n      type: 3,\n      rotation: 180,\n      flipped: false,\n      round: 5\n    },\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 16,\n      rotation: 180,\n      flipped: false\n    },\n    null,\n    null,\n    {\n      type: 6,\n      rotation: 180,\n      flipped: false,\n      round: 2\n    },\n    null,\n    null,\n    null,\n    null,\n    {\n      type: 16,\n      rotation: 0,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    {\n      type: 4,\n      rotation: 270,\n      flipped: false,\n      round: 3\n    },\n    {\n      type: 12,\n      rotation: 270,\n      flipped: false,\n      round: 3\n    },\n    {\n      type: 4,\n      rotation: 270,\n      flipped: false,\n      round: 3\n    },\n    {\n      type: 5,\n      rotation: 90,\n      flipped: false,\n      round: 5\n    },\n    null,\n    null,\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 17,\n      rotation: 450,\n      flipped: false\n    },\n    null,\n    {\n      type: 6,\n      rotation: 180,\n      flipped: false,\n      round: 3\n    },\n    {\n      type: 5,\n      rotation: 90,\n      flipped: false,\n      round: 4\n    },\n    {\n      type: 5,\n      rotation: 0,\n      flipped: false,\n      round: 4\n    },\n    {\n      type: 5,\n      rotation: 270,\n      flipped: false,\n      round: 5\n    },\n    null,\n    {\n      type: 1,\n      rotation: 180,\n      flipped: false,\n      round: 3\n    },\n    {\n      type: 17,\n      rotation: 270,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    {\n      type: 6,\n      rotation: 180,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 4,\n      rotation: 90,\n      flipped: false,\n      round: 4\n    },\n    {\n      type: 7,\n      rotation: 270,\n      flipped: false,\n      round: 2\n    },\n    null,\n    null,\n    {\n      type: 2,\n      rotation: 90,\n      flipped: false,\n      round: 4\n    },\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    null,\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: 90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 17,\n      rotation: 360,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: 90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    null\n  ]\n];\n */\n/* const testgridData = [\n  [\n    null,\n    edge(\"top\", \"blank\"),\n    edge(\"top\", \"road\"),\n    edge(\"top\", \"blank\"),\n    edge(\"top\", \"rail\"),\n    edge(\"top\", \"blank\"),\n    edge(\"top\", \"road\"),\n    edge(\"top\", \"blank\"),\n    null\n  ],\n  [\n    edge(\"left\", \"blank\"),\n    regularTile(4, 180, false),\n    regularTile(5, 180, false),\n    // null,\n    // null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"blank\")\n  ],\n  [\n    edge(\"left\", \"rail\"),\n    regularTile(4, 90, false),\n    regularTile(4, 0, false),\n    // null,\n    // null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"rail\")\n  ],\n  [\n    edge(\"left\", \"blank\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"blank\")\n  ],\n  [\n    edge(\"left\", \"road\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"road\")\n  ],\n  [\n    edge(\"left\", \"blank\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"blank\")\n  ],\n  [\n    edge(\"left\", \"rail\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"rail\")\n  ],\n  [\n    edge(\"left\", \"blank\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"blank\")\n  ],\n  [\n    null,\n    edge(\"bottom\", \"blank\"),\n    edge(\"bottom\", \"road\"),\n    edge(\"bottom\", \"blank\"),\n    edge(\"bottom\", \"rail\"),\n    edge(\"bottom\", \"blank\"),\n    edge(\"bottom\", \"road\"),\n    edge(\"bottom\", \"blank\"),\n    null\n  ]\n];\n */\nconst blankGrid = [\n  [\n    null,\n    edge(\"top\", \"blank\"),\n    edge(\"top\", \"road\"),\n    edge(\"top\", \"blank\"),\n    edge(\"top\", \"rail\"),\n    edge(\"top\", \"blank\"),\n    edge(\"top\", \"road\"),\n    edge(\"top\", \"blank\"),\n    null\n  ],\n  [\n    edge(\"left\", \"blank\"),\n\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"blank\")\n  ],\n  [\n    edge(\"left\", \"rail\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"rail\")\n  ],\n  [\n    edge(\"left\", \"blank\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"blank\")\n  ],\n  [\n    edge(\"left\", \"road\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"road\")\n  ],\n  [\n    edge(\"left\", \"blank\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"blank\")\n  ],\n  [\n    edge(\"left\", \"rail\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"rail\")\n  ],\n  [\n    edge(\"left\", \"blank\"),\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    edge(\"right\", \"blank\")\n  ],\n  [\n    null,\n    edge(\"bottom\", \"blank\"),\n    edge(\"bottom\", \"road\"),\n    edge(\"bottom\", \"blank\"),\n    edge(\"bottom\", \"rail\"),\n    edge(\"bottom\", \"blank\"),\n    edge(\"bottom\", \"road\"),\n    edge(\"bottom\", \"blank\"),\n    null\n  ]\n];\n\n/* const gridPath = [\n  [\n    null,\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: -90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 17,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: -90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    null\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    {\n      type: 4,\n      rotation: 90,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 6,\n      rotation: 270,\n      flipped: false,\n      round: 4\n    },\n    {\n      type: 7,\n      rotation: 270,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 6,\n      rotation: 270,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 5,\n      rotation: 0,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 4,\n      rotation: 270,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 17,\n      rotation: 450,\n      flipped: false\n    },\n    {\n      type: 3,\n      rotation: 270,\n      flipped: false,\n      round: 5\n    },\n    {\n      type: 1,\n      rotation: 270,\n      flipped: false,\n      round: 5\n    },\n    null,\n    {\n      type: 3,\n      rotation: 180,\n      flipped: false,\n      round: 2\n    },\n    null,\n    {\n      type: 1,\n      rotation: 180,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 15,\n      rotation: 180,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 17,\n      rotation: 270,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    {\n      type: 2,\n      rotation: 0,\n      flipped: false,\n      round: 6\n    },\n    {\n      type: 2,\n      rotation: 270,\n      flipped: false,\n      round: 6\n    },\n    {\n      type: 3,\n      rotation: 180,\n      flipped: false,\n      round: 3\n    },\n    null,\n    {\n      type: 3,\n      rotation: 180,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 6,\n      rotation: 180,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 16,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 4,\n      rotation: 270,\n      flipped: false,\n      round: 3\n    },\n    null,\n    {\n      type: 3,\n      rotation: 180,\n      flipped: false,\n      round: 7\n    },\n    {\n      type: 3,\n      rotation: 180,\n      flipped: false,\n      round: 3\n    },\n    null,\n    {\n      type: 9,\n      rotation: 0,\n      flipped: true,\n      round: 1\n    },\n    {\n      type: 5,\n      rotation: 0,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 16,\n      rotation: 0,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    {\n      type: 5,\n      rotation: 90,\n      flipped: false,\n      round: 4\n    },\n    {\n      type: \"12\",\n      rotation: 270,\n      flipped: false,\n      round: 6\n    },\n    {\n      type: 6,\n      rotation: 270,\n      flipped: false,\n      round: 4\n    },\n    {\n      type: 9,\n      rotation: 0,\n      flipped: false,\n      round: 4\n    },\n    null,\n    null,\n    null,\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 17,\n      rotation: 450,\n      flipped: false\n    },\n    {\n      type: 9,\n      rotation: 270,\n      flipped: true,\n      round: 3\n    },\n    {\n      type: 4,\n      rotation: 90,\n      flipped: false,\n      round: 6\n    },\n    {\n      type: 8,\n      rotation: 90,\n      flipped: false,\n      round: 6\n    },\n    null,\n    null,\n    {\n      type: 1,\n      rotation: 180,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 3,\n      rotation: 270,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 17,\n      rotation: 270,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    null,\n    null,\n    {\n      type: 2,\n      rotation: 90,\n      flipped: false,\n      round: 5\n    },\n    {\n      type: 8,\n      rotation: 270,\n      flipped: false,\n      round: 5\n    },\n    {\n      type: \"14\",\n      rotation: 270,\n      flipped: false,\n      round: 2\n    },\n    null,\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    null,\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: 90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 17,\n      rotation: 360,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: 90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    null\n  ]\n];\n */\n/* const buggyGrid = [\n  [\n    null,\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: -90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 17,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: -90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 0,\n      flipped: false\n    },\n    null\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 17,\n      rotation: 450,\n      flipped: false\n    },\n    null,\n    null,\n    null,\n    null,\n    null,\n    {\n      type: 1,\n      rotation: 180,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 3,\n      rotation: 270,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 17,\n      rotation: 270,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 16,\n      rotation: 180,\n      flipped: false\n    },\n    null,\n    null,\n    null,\n    null,\n    {\n      type: 4,\n      rotation: 180,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 6,\n      rotation: 270,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 5,\n      rotation: 180,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 16,\n      rotation: 0,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    null,\n    null,\n    {\n      type: 8,\n      rotation: 270,\n      flipped: false,\n      round: 2\n    },\n    {\n      type: 5,\n      rotation: 270,\n      flipped: false,\n      round: 2\n    },\n    null,\n    {\n      type: 8,\n      rotation: 180,\n      flipped: false,\n      round: 1\n    },\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 17,\n      rotation: 450,\n      flipped: false\n    },\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    {\n      type: 1,\n      rotation: 90,\n      flipped: false,\n      round: 3\n    },\n    {\n      type: 17,\n      rotation: 270,\n      flipped: false\n    }\n  ],\n  [\n    {\n      type: 18,\n      rotation: 270,\n      flipped: false\n    },\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    {\n      type: 18,\n      rotation: 90,\n      flipped: false\n    }\n  ],\n  [\n    null,\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: 90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 17,\n      rotation: 360,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    {\n      type: 16,\n      rotation: 90,\n      flipped: false\n    },\n    {\n      type: 18,\n      rotation: 180,\n      flipped: false\n    },\n    null\n  ]\n]; */\n\n// let gridData = fullGrid;\n//let gridData = buggyGrid;\n//let gridData = gridPath;\nlet gridData = blankGrid;\n\nlet connectingExits = gridData\n  .map((row, rowIndex) =>\n    row.map((cell, colIndex) => {\n      let x = colIndex === 0 ? 1 : colIndex === 8 ? 7 : colIndex;\n      let y = rowIndex === 0 ? 1 : rowIndex === 8 ? 7 : rowIndex;\n      return { colIndex: x, rowIndex: y, cell };\n    })\n  )\n  .reduce((total, cell) => {\n    return total.concat(cell);\n  }, [])\n  .filter(\n    cell => cell.cell && (cell.cell.type === 17 || cell.cell.type === 16)\n  );\n\nexport { gridData, connectingExits };\n","import {\n  findEndPoints,\n  // longestRoad,\n  // longestRail,\n  longestPath,\n  completePath\n} from \"./Board_utils\";\n\nimport { connectingExits } from \"./data/game_grid\";\n\nconst scoreLookup = [0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 45];\n\nconst checkMiddleTiles = gridData => {\n  let filteredRows = gridData.filter(\n    (row, rowIndex) => row && rowIndex > 2 && rowIndex < 6\n  );\n\n  let cells = filteredRows.map(row =>\n    row.filter((cell, colIndex) =>\n      cell && colIndex > 2 && colIndex < 6 ? 1 : 0\n    )\n  );\n\n  let middleTileCount = cells[0].length + cells[1].length + cells[2].length;\n\n  return middleTileCount;\n};\n\nconst deadEndScore = endPoints => {\n  let deadEnds = 0;\n  if (endPoints) {\n    const flattened = endPoints.reduce((total, amount) => {\n      return total.concat(amount);\n    }, []);\n    const filtered = flattened.filter(cell => cell);\n\n    const reduced = filtered.reduce((acc, cell) => {\n      let ends = 0;\n      for (const key in cell.match) {\n        let value = cell.match[key];\n        //optional check for properties from prototype chain\n        if (value && value === \"dead-end\") {\n          ends++;\n        }\n      }\n\n      return ends + acc;\n    }, 0);\n\n    deadEnds = 0 - reduced;\n  }\n  return deadEnds;\n};\n\nconst updateScores = (gridData, setState) => {\n  if (gridData) {\n    let scores = {};\n    let endPoints = findEndPoints(gridData);\n    scores.connections = 0;\n    scores.road = 0;\n    scores.rail = 0;\n    scores.deadEnd = deadEndScore(endPoints);\n    scores.middleTiles = checkMiddleTiles(gridData);\n    scores.expansions = 0;\n\n    // console.log(\n    //   gridData.map((row, rowIndex) => {\n    //     if (rowIndex === 0 || rowIndex === 8) {\n    //       return 0;\n    //     } else {\n    //       return row.map((cell, colIndex) => {\n    //         if (colIndex === 0 || colIndex === 8) {\n    //           return 0;\n    //         } else {\n    //           // if (colIndex === 4 && rowIndex === 7) debugger;\n    //           console.log(longestPath(gridData, rowIndex, colIndex));\n    //           return traverse(\n    //             longestPath(gridData, rowIndex, colIndex) &&\n    //               longestPath(gridData, rowIndex, colIndex).path,\n    //             0\n    //           );\n    //         }\n    //       });\n    //     }\n    //   })\n    // );\n    // debugger;\n    // let debug = completePath(gridData, 4, 7, \"\", 0, []);\n\n    // console.log(debug);\n    //debugger;\n    let exitPaths =\n      gridData &&\n      connectingExits\n        .map(exit => {\n          return traverseExits(\n            completePath(gridData, exit.rowIndex, exit.colIndex, \"\", 0, []),\n            []\n          )\n            .sort()\n            .filter(function(item, pos, ary) {\n              return !pos || item !== ary[pos - 1];\n            });\n        })\n        .filter(cell => cell.length > 1);\n    //.reduce((acc, item) => acc + \",\" + item)\n    //console.log(exitPaths);\n\n    let cleanPaths = exitPaths.map(exit =>\n      exit.reduce((acc, item) => acc + \",\" + item)\n    );\n    //console.log(cleanPaths);\n\n    let noDupes = cleanPaths.sort().filter(function(item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n\n    let splitArray = noDupes.map(item => item.split(\",\"));\n    console.log(splitArray);\n\n    scores.connections = edgeConnectionsScores(splitArray);\n\n    // let debug = completePath(gridData, 1, 2, \"\", 0, []);\n    // console.log({ debug });\n\n    scores.road = gridData\n      .map((row, rowIndex) => {\n        if (rowIndex === 0 || rowIndex === 8) {\n          return 0;\n        } else {\n          return row\n            .map((cell, colIndex) => {\n              if (colIndex === 0 || colIndex === 8) {\n                return 0;\n              } else {\n                let lp = longestPath(gridData, rowIndex, colIndex);\n                return traverse(lp && lp.path, 1);\n              }\n            })\n            .reduce((acc, item) => Math.max(acc, item), 0);\n        }\n      })\n      .reduce((acc, item) => Math.max(acc, item), 0);\n\n    scores.rail = gridData\n      .map((row, rowIndex) => {\n        if (rowIndex === 0 || rowIndex === 8) {\n          return 0;\n        } else {\n          return row\n            .map((cell, colIndex) => {\n              if (colIndex === 0 || colIndex === 8) {\n                return 0;\n              } else {\n                let lp = longestPath(\n                  gridData,\n                  rowIndex,\n                  colIndex,\n                  \"\",\n                  0,\n                  [],\n                  \"rail\"\n                );\n                return traverse(lp && lp.path, 1);\n              }\n            })\n            .reduce((acc, item) => Math.max(acc, item), 0);\n        }\n      })\n      .reduce((acc, item) => Math.max(acc, item), 0);\n\n    scores.total = Object.keys(scores).reduce(function(previous, key) {\n      return previous + scores[key];\n    }, 0);\n\n    setState({ scores, endPoints });\n  } else {\n    console.log(\"No grid data\");\n  }\n};\n\nconst edgeConnectionsScores = array => {\n  return array.reduce((acc, item) => acc + scoreLookup[item.length], 0);\n};\n\nconst traverse = (obj, longest) => {\n  let depth = 0;\n  if (obj && typeof obj == \"object\") {\n    Object.entries(obj).forEach(([key, value]) => {\n      //debugger;\n      if (typeof value === \"object\") {\n        longest = Math.max(traverse(value, longest), longest);\n      } else if (key === \"depth\") depth = value;\n    });\n    return Math.max(longest, depth);\n  }\n  return 0;\n};\n\nconst traverseExits = (obj, list) => {\n  if (obj && typeof obj == \"object\") {\n    Object.entries(obj).forEach(([key, value]) => {\n      //debugger;\n      if (typeof value === \"object\") {\n        list = traverseExits(value, list);\n      } else if (\n        typeof value === \"string\" &&\n        value.substring(0, 4) === \"edge\"\n      ) {\n        //console.log(value, value.substring(0, 3));\n        list.push(value);\n      }\n    });\n    return list;\n  }\n  return list;\n};\n\nconst resetScores = () => {\n  let scores = {};\n\n  scores.connections = 0;\n  scores.road = 0;\n  scores.rail = 0;\n  scores.deadEnd = 0;\n  scores.middleTiles = 0;\n  scores.expansions = 0;\n\n  scores.total = 0;\n\n  return scores;\n\n  //console.log(scores);\n};\n\nexport { checkMiddleTiles, deadEndScore, updateScores, resetScores };\n","import { isValid } from \"./Board_utils\";\n\nconst clearShadow = () => [\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null, null]\n];\n\nconst createShadow = (selectedTile, gridData) => {\n  let gridDataShadow = clearShadow();\n  let newShadow = gridDataShadow.map((row, rowIndex) => {\n    return row.map((tile, colIndex) => {\n      let tileRotate = 0;\n      let tileFlipped = false;\n\n      let validity = {\n        zero: isValid(\n          colIndex,\n          rowIndex,\n          selectedTile,\n          0,\n          false,\n          \"no\",\n          gridData\n        ),\n        ninety: isValid(\n          colIndex,\n          rowIndex,\n          selectedTile,\n          90,\n          false,\n          \"no\",\n          gridData\n        ),\n        oneeighty: isValid(\n          colIndex,\n          rowIndex,\n          selectedTile,\n          180,\n          false,\n          \"no\",\n          gridData\n        ),\n        twoseventy: isValid(\n          colIndex,\n          rowIndex,\n          selectedTile,\n          270,\n          false,\n          \"no\",\n          gridData\n        ),\n        zeroflipped: isValid(\n          colIndex,\n          rowIndex,\n          selectedTile,\n          0,\n          true,\n          \"no\",\n          gridData\n        ),\n        ninetyflipped: isValid(\n          colIndex,\n          rowIndex,\n          selectedTile,\n          90,\n          true,\n          \"no\",\n          gridData\n        ),\n        gridData,\n        oneeightyflipped: isValid(\n          colIndex,\n          rowIndex,\n          selectedTile,\n          180,\n          true,\n          \"no\",\n          gridData\n        ),\n        twoseventyflipped: isValid(\n          colIndex,\n          rowIndex,\n          selectedTile,\n          270,\n          true,\n          \"no\",\n          gridData\n        )\n      };\n      let validTile = false;\n      if (validity.zero.isValid) {\n        tileRotate = 0;\n        validTile = true;\n      }\n      if (validity.ninety.isValid) {\n        tileRotate = 90;\n        validTile = true;\n      }\n      if (validity.oneeighty.isValid) {\n        tileRotate = 180;\n        validTile = true;\n      }\n      if (validity.twoseventy.isValid) {\n        tileRotate = 270;\n        validTile = true;\n      }\n      if (validity.zeroflipped.isValid && selectedTile === 9) {\n        tileRotate = 0;\n        tileFlipped = true;\n        validTile = true;\n      }\n      if (validity.ninetyflipped.isValid && selectedTile === 9) {\n        tileRotate = 90;\n        tileFlipped = true;\n        validTile = true;\n      }\n      if (validity.oneeightyflipped.isValid && selectedTile === 9) {\n        tileRotate = 180;\n        tileFlipped = true;\n        validTile = true;\n      }\n      if (validity.twoseventyflipped.isValid && selectedTile === 9) {\n        tileRotate = 270;\n        tileFlipped = true;\n        validTile = true;\n      }\n      if (rowIndex < 1 || colIndex < 1 || rowIndex > 7 || colIndex > 7) {\n        return null;\n      }\n\n      if (tile === null && validTile) {\n        return {\n          tile: selectedTile,\n          rotation: tileRotate,\n          flipped: tileFlipped\n        };\n      }\n      return null;\n    });\n  });\n\n  return newShadow;\n};\n\nexport { clearShadow, createShadow };\n","const diceMap = [\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 5, 6],\n  [7, 8, 9, 7, 8, 9]\n];\n\nconst roll = setState => {\n  const dice = [rollOne(), rollOne(), rollOne(), rollOne()];\n\n  //return dice;\n  setState({ dice });\n};\n\nconst shake = (currentRound, setState) => {\n  const dice = [0, 0, 0, 0];\n  const diceState = [\"rolled\", \"rolled\", \"rolled\", \"rolled\"];\n  let round = Number(currentRound) + 1;\n  let roundMsg = \"Round \" + round;\n  if (round > 6) {\n    roundMsg = \"Last round!\";\n  }\n  setTimeout(() => {\n    roll(setState);\n  }, 1000);\n  setState({\n    dice,\n    selectedTile: 18,\n    diceState,\n    round: round,\n    roundMsg\n  });\n};\n\nconst rollOne = () => {\n  return Math.floor(Math.random() * 6) + 1;\n};\n\nexport { diceMap, roll, shake, rollOne };\n","import React, { Component } from \"react\";\nimport \"./dice.scss\";\nimport Board from \"./Board\";\nimport Dice from \"./Dice\";\nimport { updateScores, resetScores } from \"./Score_utils\";\nimport { regularTile } from \"./Tile_utils\";\nimport { gridData } from \"./data/game_grid.js\";\nimport { clearShadow, createShadow } from \"./Shadow_utils\";\nimport { isValid, findEndPoints } from \"./Board_utils\";\nimport { shake, diceMap, rollOne } from \"./Dice_utils\";\n\nclass Game extends Component {\n  state = {\n    round: 1,\n    roundMsg: \"Round 1\",\n    dice: [rollOne(), rollOne(), rollOne(), rollOne()],\n    diceState: [\"rolled\", \"rolled\", \"rolled\", \"rolled\"],\n    selectedTile: 18,\n    gridData: gridData,\n    gridDataShadow: clearShadow(),\n    specialTiles: [true, true, true, true, true, true],\n    scores: resetScores()\n  };\n\n  setGameState = stateObject => {\n    this.setState(stateObject);\n  };\n\n  redoRound = () => {\n    let diceState = this.state.diceState.map(d => \"rolled\");\n    let gridData = this.state.gridData.map(row =>\n      row.map(cell => {\n        if (cell && cell.round) {\n          if (cell.round === this.state.round) {\n            return null;\n          }\n        }\n        return cell;\n      })\n    );\n\n    let gridDataShadow = clearShadow();\n    this.setState({\n      diceState,\n      gridData,\n      gridDataShadow\n    });\n\n    updateScores(gridData, this.setGameState);\n  };\n\n  placeTile = (rowIndex, colIndex) => {\n    let gridData = this.state.gridData;\n    let gridDataShadow = this.state.gridDataShadow;\n    let shadowTile = gridDataShadow[rowIndex][colIndex];\n    gridData[rowIndex][colIndex] = regularTile(\n      shadowTile.tile,\n      shadowTile.rotation,\n      shadowTile.flipped\n    );\n    gridData[rowIndex][colIndex].round = this.state.round;\n    let diceState = this.state.diceState.map(d =>\n      d === \"selected\" ? \"played\" : d\n    );\n    gridDataShadow = clearShadow();\n\n    let endPoints = findEndPoints(gridData);\n\n    this.setState({\n      gridData,\n      selectedTile: 18,\n      diceState,\n      gridDataShadow,\n      endPoints\n    });\n\n    updateScores(gridData, this.setGameState);\n  };\n\n  placeRotatedTile = (rowIndex, colIndex, rotation, flipped) => {\n    let gridData = this.state.gridData;\n\n    gridData[rowIndex][colIndex].rotation = rotation;\n    gridData[rowIndex][colIndex].flipped = flipped;\n\n    let endPoints = findEndPoints(gridData);\n    // let deadEndScore = this.deadEndScore(endPoints);\n    // let middleTileScore = this.checkMiddleTiles(gridData);\n\n    this.setState({ gridData, endPoints });\n    updateScores(gridData, this.setGameState);\n  };\n\n  rotateTile = (rowIndex, colIndex) => {\n    let tile = this.state.gridData[rowIndex][colIndex];\n    let rotation = Number(tile.rotation);\n    let flipped = tile.flipped;\n    let type = tile.type;\n\n    let round = Number(tile.round);\n    if (round !== Number(this.state.round)) {\n      return;\n    }\n    if (type === 9) {\n      rotation = (rotation + 90) % 360;\n      if (\n        isValid(colIndex, rowIndex, type, rotation, flipped, \"yes\", gridData)\n          .isValid\n      ) {\n        this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n      } else {\n        flipped = !flipped;\n        if (\n          isValid(colIndex, rowIndex, type, rotation, flipped, \"yes\", gridData)\n            .isValid\n        ) {\n          this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n        } else {\n          rotation = (rotation + 90) % 360;\n          if (\n            isValid(\n              colIndex,\n              rowIndex,\n              type,\n              rotation,\n              flipped,\n              \"yes\",\n              gridData\n            ).isValid\n          ) {\n            this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n          } else {\n            flipped = !flipped;\n            if (\n              isValid(\n                colIndex,\n                rowIndex,\n                type,\n                rotation,\n                flipped,\n                \"yes\",\n                gridData\n              ).isValid\n            ) {\n              this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n            } else {\n              rotation = (rotation + 90) % 360;\n              if (\n                isValid(\n                  colIndex,\n                  rowIndex,\n                  type,\n                  rotation,\n                  flipped,\n                  \"yes\",\n                  gridData\n                ).isValid\n              ) {\n                this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n              } else {\n                flipped = !flipped;\n                if (\n                  isValid(\n                    colIndex,\n                    rowIndex,\n                    type,\n                    rotation,\n                    flipped,\n                    \"yes\",\n                    gridData\n                  ).isValid\n                ) {\n                  this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n                } else {\n                  rotation = (rotation + 90) % 360;\n                  if (\n                    isValid(\n                      colIndex,\n                      rowIndex,\n                      type,\n                      rotation,\n                      flipped,\n                      \"yes\",\n                      gridData\n                    ).isValid\n                  ) {\n                    this.placeRotatedTile(\n                      rowIndex,\n                      colIndex,\n                      rotation,\n                      flipped\n                    );\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      rotation = (rotation + 90) % 360;\n      if (\n        isValid(colIndex, rowIndex, type, rotation, flipped, \"yes\", gridData)\n          .isValid\n      ) {\n        this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n      } else {\n        rotation = (rotation + 90) % 360;\n        if (\n          isValid(colIndex, rowIndex, type, rotation, flipped, \"yes\", gridData)\n            .isValid\n        ) {\n          this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n        } else {\n          rotation = (rotation + 90) % 360;\n          if (\n            isValid(\n              colIndex,\n              rowIndex,\n              type,\n              rotation,\n              flipped,\n              \"yes\",\n              gridData\n            ).isValid\n          ) {\n            this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n          } else {\n            rotation = (rotation + 90) % 360;\n            if (\n              isValid(\n                colIndex,\n                rowIndex,\n                type,\n                rotation,\n                flipped,\n                \"yes\",\n                gridData\n              ).isValid\n            ) {\n              this.placeRotatedTile(rowIndex, colIndex, rotation, flipped);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  changeTile = selectedTile => {\n    let specialTiles = this.state.specialTiles;\n    if (specialTiles[selectedTile - 10]) {\n      specialTiles[selectedTile - 10] = false;\n      const gridDataShadow = createShadow(selectedTile, this.state.gridData);\n      console.log(gridDataShadow);\n      this.setState({\n        selectedTile,\n        gridDataShadow,\n        specialTiles\n      });\n    }\n  };\n\n  clickDice = die => {\n    if (this.state.dice[die] === 0) {\n      return;\n    }\n    if (this.state.diceState[die] === \"played\") {\n      return;\n    }\n    let selectedTile = diceMap[die][this.state.dice[die] - 1];\n    let diceState = this.state.diceState.map(d =>\n      d === \"selected\" ? \"rolled\" : d\n    );\n\n    diceState[die] = \"selected\";\n    //console.log(\"Grid\", this.state.gridData);\n    const gridDataShadow = createShadow(selectedTile, this.state.gridData);\n    //console.log(gridDataShadow);\n    this.setState({\n      selectedTile,\n      diceState,\n      gridDataShadow\n    });\n  };\n\n  allPlayed = () => {\n    //debugger;\n    let diceFilter = this.state.diceState.filter(d => d === \"played\");\n    if (diceFilter.length === this.state.diceState.length) {\n      return true;\n    }\n    return false;\n  };\n\n  nonePlayed = () => {\n    //debugger;\n    let diceFilter = this.state.diceState.filter(d => d === \"played\");\n    if (diceFilter.length === 0) {\n      return true;\n    }\n    return false;\n  };\n\n  //   directionMap = {\n  //     north: \"above\",\n  //     east: \"right\",\n  //     south: \"below\",\n  //     west: \"left\"\n  //   };\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"Board\">\n          <Board\n            endPoints={this.state.endPoints}\n            scores={this.state.scores}\n            rotateTile={this.rotateTile}\n            placeTile={this.placeTile}\n            setTile={this.changeTile}\n            gridData={this.state.gridData}\n            gridDataShadow={this.state.gridDataShadow}\n            isValid={isValid}\n            selectedTile={this.state.selectedTile}\n            specialTiles={this.state.specialTiles}\n          />\n        </div>\n        <div className=\"DiceTray\">\n          <h1>{this.state.roundMsg}</h1>\n          <div className=\"controlButtons\">\n            {!this.nonePlayed() ? (\n              <button className=\"btn\" onClick={this.redoRound}>\n                {\"<< Redo round\"}\n              </button>\n            ) : null}\n            <br />\n            {this.state.round < 7 && this.allPlayed() ? (\n              <button\n                className=\"btnNext\"\n                onClick={() => shake(this.state.round, this.setGameState)}\n              >\n                {\"Start Round \" + (this.state.round + 1) + \" >>\"}\n              </button>\n            ) : null}\n          </div>\n          <Dice\n            enabled={this.state.diceState[0]}\n            clickDice={() => this.clickDice(0)}\n            type=\"dice\"\n            face={\"side\" + this.state.dice[0]}\n          />\n          <Dice\n            enabled={this.state.diceState[1]}\n            clickDice={() => this.clickDice(1)}\n            type=\"dice\"\n            face={\"side\" + this.state.dice[1]}\n          />\n\n          <br />\n          <Dice\n            enabled={this.state.diceState[2]}\n            clickDice={() => this.clickDice(2)}\n            type=\"dice\"\n            face={\"side\" + this.state.dice[2]}\n          />\n          <Dice\n            enabled={this.state.diceState[3]}\n            clickDice={() => this.clickDice(3)}\n            type=\"dice2\"\n            face={\"side\" + this.state.dice[3]}\n          />\n          <br />\n          <br />\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Game from \"./Game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Game />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}